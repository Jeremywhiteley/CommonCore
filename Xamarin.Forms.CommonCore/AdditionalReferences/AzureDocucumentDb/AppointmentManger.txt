using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Azure.Documents.Client;
using Microsoft.Azure.Documents.Linq;

namespace referenceguide
{
	public interface IAppointmentManager
	{
		Task<List<Appointment>> GetAllAppointments(long? updatedSince);
		Task<Appointment> InsertAppointmentAsync(Appointment appt);
		Task<bool> UpateAppointmentAsync(Appointment appt);
	}
	public class AppointmentManager : IAppointmentManager
	{
		const string accountURL = @"https://azmeetupdemo.documents.azure.com:443/";
		const string accountKey = @"iZIFUtlyMmdqqJrpHqPXNotAeHaMPa4Rb81cSlOX80YEpyf4r0RWrv6uABcisoUTXpDzK1I4zcFJD2eR9r31rg==";
		const string databaseId = @"Maximo";
		const string collectionId = @"MaxEvents";

		private Uri collectionLink = UriFactory.CreateDocumentCollectionUri(databaseId, collectionId);

		private DocumentClient client;

		public AppointmentManager()
		{
			client = new DocumentClient(new System.Uri(accountURL), accountKey);
		}

		public async Task<List<Appointment>> GetAllAppointments(long? updatedSince)
		{
			var items = new List<Appointment>();
			IDocumentQuery<Appointment> query;
			try
			{
				//if (updatedSince.HasValue)
				//	query = client.CreateDocumentQuery<Appointment>(collectionLink, new FeedOptions { MaxItemCount = -1 })
				//				  .Where(item => item.StartDate >= DateTime.Now && item.UTCTickStamp >= updatedSince.Value)
				//				  .AsDocumentQuery();
				//else
				//	query = client.CreateDocumentQuery<Appointment>(collectionLink, new FeedOptions { MaxItemCount = -1 })
				//				  .Where(item => item.StartDate >= DateTime.Now)
				//				  .AsDocumentQuery();

				query = client.CreateDocumentQuery<Appointment>(collectionLink, new FeedOptions { MaxItemCount = -1 })
							  .Where(item => item.StartDate >= DateTime.Now)
							  .AsDocumentQuery();

				while (query.HasMoreResults)
				{
					items.AddRange(await query.ExecuteNextAsync<Appointment>());
				}

			}
			catch (Exception e)
			{
				Console.Error.WriteLine(@"ERROR {0}", e.Message);
				return null;
			}

			return items;
		}

		public async Task<Appointment> InsertAppointmentAsync(Appointment appt)
		{
			try
			{
				appt.UTCTickStamp = DateTime.UtcNow.Ticks;
				var result = await client.CreateDocumentAsync(collectionLink, appt);
				appt.ID = result.Resource.Id;
			}
			catch (Exception e)
			{
				Console.Error.WriteLine(@"ERROR {0}", e.Message);
			}
			return appt;
		}
		public async Task<bool> UpateAppointmentAsync(Appointment appt)
		{
			try
			{
				appt.UTCTickStamp = DateTime.UtcNow.Ticks;
				var result = await client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(databaseId, collectionId, appt.ID), appt);
				if (result.StatusCode == HttpStatusCode.OK)
				{
					return true;
				}
				return false;
			}
			catch (Exception e)
			{
				Console.Error.WriteLine(@"ERROR {0}", e.Message);
				return false;
			}
		}


	}
}
