Add to the MainActivity the following:
		protected override void OnStart()
		{
			base.OnStart();
			AzureDbBackground.Instance.Start();
		}

		protected override void OnStop()
		{
			base.OnStop();
			AzureDbBackground.Instance.Stop();
		}






#if __ANDROID__
using System;
using System.Threading.Tasks;
using Android.App;
using Android.Content;
using Android.OS;
using Xamarin.Forms.CommonCore;

namespace referenceguide
{
	public class AzureDbBackground
	{
		private AzureDbBackgroundingServiceConnection azureServiceConnection;
		private AzureDbBackgroundingReceiver azureReceiver;
		public bool IsBound { get; set; } = false;
		public BackgroundingServiceBinder Binder { get; set; }
		public Intent azureServiceIntent;

		public Context Ctx { get { return Xamarin.Forms.Forms.Context; } }

		public static AzureDbBackground Instance = new AzureDbBackground();

		public AzureDbBackground()
		{
			azureServiceIntent = new Intent(Ctx, typeof(AzureDbBackgroundService));
			azureReceiver = new AzureDbBackgroundingReceiver();
		}
		public void Start()
		{
			var intentFilter = new IntentFilter(AzureDbBackgroundService.AzureUpdatedAction) { Priority = (int)IntentFilterPriority.HighPriority };
			Ctx.RegisterReceiver(azureReceiver, intentFilter);

			azureServiceConnection = new AzureDbBackgroundingServiceConnection();
			Ctx.BindService(azureServiceIntent, azureServiceConnection, Bind.AutoCreate);

			//RegisterAlarmManager();
		}

		public void Stop()
		{
			if (IsBound)
			{
				Ctx.UnbindService(azureServiceConnection);

				IsBound = false;
			}

			Ctx.UnregisterReceiver(azureReceiver);
		}

		public void RegisterAlarmManager()
		{
			if (!IsAlarmSet())
			{
				var alarm = (AlarmManager)Ctx.GetSystemService(Context.AlarmService);

				var pendingServiceIntent = PendingIntent.GetService(Ctx, 0, azureServiceIntent, PendingIntentFlags.CancelCurrent);
				alarm.SetRepeating(AlarmType.Rtc, 0, 1000, pendingServiceIntent);

				//alarm.SetRepeating (AlarmType.Rtc, 0, AlarmManager.IntervalHalfHour, pendingServiceIntent);
			}
			else
			{
				Console.WriteLine("alarm already set");
			}
		}
		bool IsAlarmSet()
		{
			return PendingIntent.GetBroadcast(Ctx, 0, azureServiceIntent, PendingIntentFlags.NoCreate) != null;
		}


		public void SyncAzureDatabase()
		{
			if (IsBound)
			{
				Task.Run(() =>
			   {
				   Binder.GetAzureService();

			   });

			}
		}
	}

	[BroadcastReceiver]
	[IntentFilter(new string[] { AzureDbBackgroundService.AzureUpdatedAction }, Priority = (int)IntentFilterPriority.LowPriority)]
	public class AzureDbBackgroudNotificationReceiver : BroadcastReceiver
	{

		public override void OnReceive(Context context, Intent intent)
		{
			var nMgr = (NotificationManager)context.GetSystemService(Context.NotificationService);
			var notification = new Notification(AppData.AppIcon, "AzureDb is scheduled for update");
			var pendingIntent = PendingIntent.GetActivity(context, 0, new Intent(context, LocalNotify.MainType), 0);
			notification.SetLatestEventInfo(context, "Azure Data Updated", "Embedded database synced", pendingIntent);
			nMgr.Notify(0, notification);
		}
	}

	[Service]
	[IntentFilter(new String[] { "referenceguide.AzureDbBackgroundService" })]
	public class AzureDbBackgroundService : IntentService
	{
		public static bool IsProcessing { get; set; }
		private IBinder binder;
		private ISqliteDb sqliteDb;
		private IAppointmentManager apptManager;
		public const string AzureUpdatedAction = "AzureUpdatedAction";


		protected ISqliteDb SqliteDb
		{
			get { return sqliteDb ?? (sqliteDb = InjectionManager.GetService<ISqliteDb, SqliteDb>(true)); }
		}

		protected IAppointmentManager ApptManager
		{
			get { return apptManager ?? (apptManager = InjectionManager.GetService<IAppointmentManager, AppointmentManager>(true)); }
		}

		protected override void OnHandleIntent(Intent intent)
		{
			if (!AzureDbBackgroundService.IsProcessing)
			{
				AzureDbBackgroundService.IsProcessing = true;
				SyncAzureDatabase().ContinueWith((t) =>
				{
					var stocksIntent = new Intent(AzureUpdatedAction);
					SendOrderedBroadcast(stocksIntent, null);
					AzureDbBackgroundService.IsProcessing = false;
				});
			}

		}

		public override IBinder OnBind(Intent intent)
		{
			binder = new BackgroundingServiceBinder(this);
			return binder;
		}

		public async Task<bool> SyncAzureDatabase()
		{
			try
			{
				var result = await SyncMgr.SyncData();

				if (result)
					InjectionManager.SendViewModelMessage<DataExampleViewModel>(AppSettings.RefreshAppoints, null);

				Console.WriteLine($"************************** Azure Document Db Update Status {result}  ***********************");

				return result;
			}
			catch (Exception ex)
			{
				return false;
			}

		}

	}

	public class BackgroundingServiceBinder : Binder
	{
		AzureDbBackgroundService service;

		public BackgroundingServiceBinder(AzureDbBackgroundService service)
		{
			this.service = service;
		}

		public AzureDbBackgroundService GetAzureService()
		{
			return service;
		}
	}

	public class AzureDbBackgroundingReceiver : BroadcastReceiver
	{
		public override void OnReceive(Context context, Android.Content.Intent intent)
		{
			AzureDbBackground.Instance.SyncAzureDatabase();

			InvokeAbortBroadcast();
		}
	}

	public class AzureDbBackgroundingServiceConnection : Java.Lang.Object, IServiceConnection
	{

		public void OnServiceConnected(ComponentName name, IBinder service)
		{
			var stockServiceBinder = service as BackgroundingServiceBinder;
			if (stockServiceBinder != null)
			{
				var binder = (BackgroundingServiceBinder)service;
				AzureDbBackground.Instance.Binder = binder;
				AzureDbBackground.Instance.IsBound = true;
			}
		}

		public void OnServiceDisconnected(ComponentName name)
		{
			AzureDbBackground.Instance.IsBound = false;
		}
	}
}
#endif
